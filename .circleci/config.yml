version: 2.1

parameters:
  SOURCE_TYPE:
    type: string
    default: "github"
  S3_URL:
    type: string
    default: ""
  REPOSITORY:
    type: string
    default: "https://github.com/thales-markets/thales-sport-markets"
  REF:
    type: string
    default: ""
  BUILD_DIR:
    type: string
    default: ""
  PACKAGE_INSTALL_COMMAND:
    type: string
    default: "export NODE_OPTIONS=--openssl-legacy-provider && npm install"
  BUILD_COMMAND:
    type: string
    default: "npm run build"
  OUTPUT_DIR:
    type: string
    default: ""
  ONE_CLICK_SERVER_URL:
    type: string
    default: ""
  ENVIRONMENT_VARIABLES:
    type: string
    default: ""
  SECRETS:
    type: string
    default: ""
  ENVIRONMENT:
    type: string
    default: "default"
    enum: ["default", "development", "staging", "sepolia-staging"]
  GITHUB_ACCESS_TOKEN:
    type: string
    default: ""
  NODE_VERSION:
    type: string
    default: "22.4.1"

jobs:
  publish:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Install AWS CLI
          command: |
            if [ ! -f "/usr/local/bin/aws" ]; then
              sudo apt-get update && sudo apt-get install -y awscli
            fi

      - run:
          name: Install NVM and Node.js
          command: |
            if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            fi
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install << pipeline.parameters.NODE_VERSION >>
            nvm use << pipeline.parameters.NODE_VERSION >>
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
            npm install node-forge

      - run:
          name: Create Decryption Script
          command: |
            echo "const forge = require('node-forge');" > ~/project/decrypt.js
            echo "const fs = require('fs');" >> ~/project/decrypt.js
            echo "" >> ~/project/decrypt.js
            echo "function decryptData(encryptedData) {" >> ~/project/decrypt.js
            echo "  const privateKeyPem = Buffer.from(process.env.BASE64_ENCODED_PRIVATE_KEY, 'base64').toString('utf8');" >> ~/project/decrypt.js
            echo "  const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);" >> ~/project/decrypt.js
            echo "  const decodedData = forge.util.decode64(encryptedData);" >> ~/project/decrypt.js
            echo "  return privateKey.decrypt(decodedData, 'RSA-OAEP', {" >> ~/project/decrypt.js
            echo "    md: forge.md.sha256.create()," >> ~/project/decrypt.js
            echo "    mgf1: { md: forge.md.sha1.create() }" >> ~/project/decrypt.js
            echo "  });" >> ~/project/decrypt.js
            echo "}" >> ~/project/decrypt.js
            echo "" >> ~/project/decrypt.js
            echo "const encryptedData = process.argv[2];" >> ~/project/decrypt.js
            echo "console.log(decryptData(encryptedData));" >> ~/project/decrypt.js

      - run:
          name: Decode secrets and environment variables
          command: |
            if [ -n "<< pipeline.parameters.SECRETS >>" ]; then
              echo "Decoding secrets..."
              echo "<< pipeline.parameters.SECRETS >>" > ~/project/encrypted_data.txt
              node ~/project/decrypt.js "$(cat ~/project/encrypted_data.txt)" > ~/project/decrypted_secrets.txt
              sed -i 's/^/export /' ~/project/decrypted_secrets.txt
              source ~/project/decrypted_secrets.txt
            else
              echo "No secrets to decode."
            fi

            if [ -n "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" ]; then
              echo "Processing environment variables..."
              echo "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" > ~/project/environment_variables.txt
              sed -i 's/^/export /' ~/project/environment_variables.txt
              source ~/project/environment_variables.txt
            else
              echo "No environment variables to process."
            fi

      - when:
          condition:
            or:
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "url"]
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "github"]
          steps:
            - run:
                name: Decrypt GITHUB_ACCESS_TOKEN and Clone Repository
                command: |
                  REPO_URL="<< pipeline.parameters.REPOSITORY >>"
                  REPO_PATH=$(echo $REPO_URL | sed 's#https://github.com/##')

                  if [ -n "<< pipeline.parameters.GITHUB_ACCESS_TOKEN >>" ] && [ -n "$BASE64_ENCODED_PRIVATE_KEY" ]; then
                    echo "Decrypting GITHUB_ACCESS_TOKEN..."
                    ENCRYPTED_TOKEN="<< pipeline.parameters.GITHUB_ACCESS_TOKEN >>"
                    DECRYPTED_TOKEN=$(node ~/project/decrypt.js "$ENCRYPTED_TOKEN")

                    if [ -n "$DECRYPTED_TOKEN" ]; then
                      echo "GITHUB_ACCESS_TOKEN has been decrypted successfully."
                      echo "Cloning with token..."
                      git clone "https://$DECRYPTED_TOKEN@github.com/${REPO_PATH}" ~/project/repository
                    else
                      echo "Error: Failed to decrypt GITHUB_ACCESS_TOKEN."
                      exit 1
                    fi
                  else
                    echo "GITHUB_ACCESS_TOKEN or BASE64_ENCODED_PRIVATE_KEY is missing. Cloning without token..."
                    git clone "$REPO_URL" ~/project/repository
                  fi

                  # Clear the decrypted token from memory
                  DECRYPTED_TOKEN=""

            - run:
                name: Run build command
                working_directory: ~/project/repository
                command: |
                  set -e  # Ensure that the script fails if any command fails
                  if [ -f ~/project/.env ]; then
                    source ~/project/.env
                  fi

                  # Navigate to the build directory if specified
                  if [ -n "<< pipeline.parameters.BUILD_DIR >>" ]; then
                    echo "Changing to build directory: << pipeline.parameters.BUILD_DIR >>"
                    cd "<< pipeline.parameters.BUILD_DIR >>"
                  else
                    echo "No build directory specified, staying in repository root."
                  fi

                  # Run package install command if specified
                  if [ -n "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>" ]; then
                    echo "Running package install command..."
                    eval "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
                  else
                    echo "No package install command specified."
                  fi

                  # Run build command
                  echo "Running build command..."
                  eval "<< pipeline.parameters.BUILD_COMMAND >>"

      - when:
          condition:
            equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Download and Extract from S3
                command: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_REGION

                  if [ "<< pipeline.parameters.ENVIRONMENT >>" == "development" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_DEV
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "staging" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "staging-sepolia" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA_STAGING
                  else
                    echo "Invalid / default environment specified."
                    exit 1
                  fi

                  S3_PATH="s3://$S3_BUCKET_NAME/$(basename "<< pipeline.parameters.S3_URL >>")"
                  aws s3 cp $S3_PATH ~/project/repository --recursive

                  if [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type d | wc -l) -eq 1 ] && [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type f | wc -l) -eq 0 ]; then
                    extracted_folder=$(find ~/project/repository -mindepth 1 -maxdepth 1 -type d)
                    mv "$extracted_folder"/* ~/project/repository/
                    rmdir "$extracted_folder"
                  fi

      - run:
          name: Check for index.html
          working_directory: ~/project/repository
          command: |
            OUTPUT_DIR=.
            if [ -n "<< pipeline.parameters.OUTPUT_DIR >>" ]; then
              OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
            fi

            if [ -f "$OUTPUT_DIR/index.html" ]; then
              echo "index.html found in $OUTPUT_DIR"
            else
              echo "Error: index.html not found in $OUTPUT_DIR"
              exit 1
            fi

      - run:
          name: Create earthfast release
          working_directory: ~/project
          command: |
            OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
            if [ -z "$OUTPUT_DIR" ] || [ "$OUTPUT_DIR" = "." ]; then
              BUNDLE_PATH="repository"
            else
              BUNDLE_PATH="repository/$OUTPUT_DIR"
            fi

            echo "Creating bundle from path: $BUNDLE_PATH"
            bundle_filename="$(npx --package=earthfast-cli@0.7.1 --yes earthfast bundle create earthfast-bundle "$BUNDLE_PATH")"

            checksum="$(npx --package=earthfast-cli@0.7.1 --yes earthfast bundle checksum $bundle_filename)"

            echo $checksum > ~/project/repository/checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"

      # store artifacts in circleci for download
      - store_artifacts:
          path: earthfast-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum
      - run:
          name: Notify one click server of the outcome
          when: always
          command: |
            ONE_CLICK_SERVER_URL="<< pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            PIPELINE_ID="<< pipeline.id >>"

            BUNDLE_URL=""
            CHECKSUM=""
            STATUS="failure"

            CHECKSUM_PATH="$HOME/project/repository/checksum"
            if [ -f "$CHECKSUM_PATH" ]; then
              CHECKSUM=$(cat "$CHECKSUM_PATH")
              STATUS="success"
              BUNDLE_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/earthfast-bundle.tgz"
            else
              echo "Checksum file not found at $CHECKSUM_PATH"
            fi

            echo "Bundle URL: $BUNDLE_URL"
            echo "Pipeline ID: $PIPELINE_ID"
            echo "Checksum: $CHECKSUM"
            echo "Status: $STATUS"
            echo "One Click Server URL: $ONE_CLICK_SERVER_URL"

            DATA='{"checksum":"'"$CHECKSUM"'","bundleUrl":"'"$BUNDLE_URL"'","pipelineId":"'"$PIPELINE_ID"'","status":"'"$STATUS"'"}'
            echo "Data Payload: $DATA"

            SIGNATURE=$(echo -n "$DATA" | openssl dgst -sha256 -hmac "$CIRCLECI_WEBHOOK_SECRET" | sed 's/^.* //')
            FULL_URL="${ONE_CLICK_SERVER_URL}/circleci/notify"
            echo "Full URL: $FULL_URL"

            curl -X POST -H "Content-Type: application/json" -H "x-circleci-signature: $SIGNATURE" -d "$DATA" "$FULL_URL"

workflows:
  version: 2
  build-and-publish:
    jobs:
      - publish
