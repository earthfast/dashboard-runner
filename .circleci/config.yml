version: 2.1

parameters:
  BUILD_COMMAND:
    type: string
    default: ""
  BUILD_DIR:
    type: string
    default: ""
  ENVIRONMENT:
    type: string
    default: "default"
    enum: ["default", "development", "testnet-sepolia", "testnet-sepolia-staging"]
  GITHUB_ACCESS_TOKEN:
    type: string
    default: ""
  NODE_VERSION:
    type: string
    default: "22.4.1"
  ONE_CLICK_SERVER_URL:
    type: string
    default: ""
  OUTPUT_DIR:
    type: string
    default: ""
  PACKAGE_INSTALL_COMMAND:
    type: string
    default: "export NODE_OPTIONS=--openssl-legacy-provider && npm install"
  REF:
    type: string
    default: ""
  REPOSITORY:
    type: string
    default: "https://github.com/thales-markets/thales-sport-markets"
  S3_URL:
    type: string
    default: ""
  SOURCE_TYPE:
    type: string
    default: "github"
  CI_TRIGGER:
    type: boolean
    default: true
  PROJECT_ID:
    type: string
    default: ""
  FRAMEWORK:
    type: string
    default: "static"
    enum: ["nextjs", "static"]

jobs:
  publish:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Project Information
          command: |
            echo "Project Setup:"
            echo "SOURCE_TYPE: << pipeline.parameters.SOURCE_TYPE >>"
            echo "S3_URL: << pipeline.parameters.S3_URL >>"
            echo "REPOSITORY: << pipeline.parameters.REPOSITORY >>"
            echo "BUILD_DIR: << pipeline.parameters.BUILD_DIR >>"
            echo "PACKAGE_INSTALL_COMMAND: << pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
            echo "BUILD_COMMAND: << pipeline.parameters.BUILD_COMMAND >>"
            echo "OUTPUT_DIR: << pipeline.parameters.OUTPUT_DIR >>"
            echo "ONE_CLICK_SERVER_URL: << pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            echo "ENVIRONMENT: << pipeline.parameters.ENVIRONMENT >>"
            echo "CI_TRIGGER: << pipeline.parameters.CI_TRIGGER >>"
            echo "PROJECT_ID: << pipeline.parameters.PROJECT_ID >>"
            echo "FRAMEWORK: << pipeline.parameters.FRAMEWORK >>"

      - run:
          name: Check CI_TRIGGER
          command: |
            if [ "<< pipeline.parameters.CI_TRIGGER >>" != true ]; then
              echo "CI_TRIGGER is not true. Exiting with success."
              circleci-agent step halt
            else
              echo "CI_TRIGGER is true. Continuing with the workflow."
            fi

      - when:
          condition:
            equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - restore_cache:
                keys:
                  - aws-cli-v8

            - run:
                name: Setup AWS CLI from cache or install
                command: |
                  echo "Checking for AWS CLI..."
                  if ! command -v aws &> /dev/null; then
                    echo "No AWS CLI found in system. Installing..."

                    if [ -d "/tmp/aws-cli-cache/dist-packages" ]; then
                      echo "Found cached AWS CLI. Installing from cache..."
                      sudo cp -r /tmp/aws-cli-cache/dist-packages/* /usr/lib/python3/dist-packages/
                      sudo cp /tmp/aws-cli-cache/aws /usr/bin/aws
                      sudo chmod +x /usr/bin/aws
                    else
                      echo "No cache found. Installing from apt..."
                      sudo apt-get update && sudo apt-get install -y \
                        awscli \
                        python3-botocore \
                        python3-colorama \
                        python3-dateutil \
                        python3-docutils \
                        python3-jmespath \
                        python3-pyasn1 \
                        python3-yaml \
                        python3-rsa \
                        python3-s3transfer \
                        python3-six \
                        python3-urllib3

                      # Cache the entire installation
                      mkdir -p /tmp/aws-cli-cache/dist-packages
                      cp -r /usr/lib/python3/dist-packages/* /tmp/aws-cli-cache/dist-packages/
                      cp /usr/bin/aws /tmp/aws-cli-cache/
                    fi
                  fi

                  aws --version

            - save_cache:
                key: aws-cli-v8
                paths:
                  - /tmp/aws-cli-cache

            - run:
                name: Verify AWS Installation
                command: |
                  which aws
                  aws --version

      - run:
          name: Install NVM and Node.js
          command: |
            if [ ! -d "$HOME/.nvm" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            fi
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install << pipeline.parameters.NODE_VERSION >>
            nvm use << pipeline.parameters.NODE_VERSION >>
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
            npm install node-forge
            npm install --global yarn
            npm install --global pnpm
            sudo apt-get update

            # install bun
            curl -fsSL https://bun.sh/install | bash
            # Add Bun to .bashrc for persistence across steps
            echo 'export BUN_INSTALL="$HOME/.bun"' >> $BASH_ENV
            echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> $BASH_ENV

      - when:
          condition:
            not:
              equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Fetch environment variables from Server
                command: |
                  set -e  # Exit immediately if a command exits with a non-zero status

                  # Check if PROJECT_ID is empty
                  if [ -z "<< pipeline.parameters.PROJECT_ID >>" ]; then
                    echo "PROJECT_ID is empty. Exiting with error."
                    exit 1
                  fi

                  # Fetch environment variables from the One Click Server
                  ENV_VARS_URL="<< pipeline.parameters.ONE_CLICK_SERVER_URL >>/projects/<< pipeline.parameters.PROJECT_ID >>/env-vars"

                  # Determine which ADMIN_KEY to use based on the ENVIRONMENT
                  if [ "<< pipeline.parameters.ENVIRONMENT >>" == "testnet-sepolia" ]; then
                    ADMIN_KEY=$ADMIN_KEY_TESTNET
                  else
                    ADMIN_KEY=$ADMIN_KEY_STAGING
                  fi

                  ENV_VARS=$(curl -s -H "x-admin-key: $ADMIN_KEY" $ENV_VARS_URL)
                  if [ $? -ne 0 ] || [ -z "$ENV_VARS" ]; then
                    echo "Failed to fetch environment variables"
                    exit 1
                  fi

                  echo "Fetched Environment Variables: $ENV_VARS"

                  # Extract the environment variables string from the JSON response
                  ENV_VARS_STRING=$(echo "$ENV_VARS" | jq -r '.environmentVariables')

                  # Add 'export' to each line and write to file
                  echo "$ENV_VARS_STRING" | sed '/^export /!s/^/export /' > ~/project/.env.ef_circleci

      - run:
          name: Create Decryption Script
          command: |
            echo "const forge = require('node-forge');" > ~/project/decrypt.js
            echo "const fs = require('fs');" >> ~/project/decrypt.js
            echo "" >> ~/project/decrypt.js
            echo "function decryptData(encryptedData) {" >> ~/project/decrypt.js
            echo "  const privateKeyPem = Buffer.from(process.env.BASE64_ENCODED_PRIVATE_KEY, 'base64').toString('utf8');" >> ~/project/decrypt.js
            echo "  const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);" >> ~/project/decrypt.js
            echo "  const decodedData = forge.util.decode64(encryptedData);" >> ~/project/decrypt.js
            echo "  return privateKey.decrypt(decodedData, 'RSA-OAEP', {" >> ~/project/decrypt.js
            echo "    md: forge.md.sha256.create()," >> ~/project/decrypt.js
            echo "    mgf1: { md: forge.md.sha1.create() }" >> ~/project/decrypt.js
            echo "  });" >> ~/project/decrypt.js
            echo "}" >> ~/project/decrypt.js
            echo "" >> ~/project/decrypt.js
            echo "const input = process.argv[2];" >> ~/project/decrypt.js
            echo "try {" >> ~/project/decrypt.js
            echo "  const parsedJson = JSON.parse(input);" >> ~/project/decrypt.js
            echo "  const decryptedJson = Object.keys(parsedJson).reduce((acc, key) => {" >> ~/project/decrypt.js
            echo "    acc[key] = decryptData(parsedJson[key]);" >> ~/project/decrypt.js
            echo "    return acc;" >> ~/project/decrypt.js
            echo "  }, {});" >> ~/project/decrypt.js
            echo "  console.log(JSON.stringify(decryptedJson));" >> ~/project/decrypt.js
            echo "} catch (e) {" >> ~/project/decrypt.js
            echo "  // If parsing fails, assume it's a single encrypted token" >> ~/project/decrypt.js
            echo "  console.log(decryptData(input));" >> ~/project/decrypt.js
            echo "}" >> ~/project/decrypt.js

      - when:
          condition:
            or:
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "url"]
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "github"]
          steps:
            - run:
                name: Clone Repository
                command: |
                  REPO_URL="<< pipeline.parameters.REPOSITORY >>"
                  REPO_PATH=$(echo $REPO_URL | sed 's#https://github.com/##')

                  if [ -n "<< pipeline.parameters.GITHUB_ACCESS_TOKEN >>" ] && [ -n "$BASE64_ENCODED_PRIVATE_KEY" ]; then
                    ENCRYPTED_TOKEN="<< pipeline.parameters.GITHUB_ACCESS_TOKEN >>"
                    DECRYPTED_TOKEN=$(node ~/project/decrypt.js "$ENCRYPTED_TOKEN")
                    git clone "https://$DECRYPTED_TOKEN@github.com/${REPO_PATH}" ~/project/repository
                    unset DECRYPTED_TOKEN
                  else
                    git clone "$REPO_URL" ~/project/repository
                  fi

                  cd ~/project/repository
                  if [ -n "<< pipeline.parameters.REF >>" ]; then
                    git checkout "<< pipeline.parameters.REF >>"
                  else
                    echo "No branch specified, staying on default branch."
                  fi

      - when:
          condition:
            and:
              - equal: ["static", "<< pipeline.parameters.FRAMEWORK >>"]
              - not:
                  equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Build Project
                working_directory: ~/project/repository
                command: |
                  set -e

                  # Load prerequisites
                  export NODE_OPTIONS=--max_old_space_size=7168

                  [ -f ~/project/.env ] && source ~/project/.env
                  [ -f ~/project/.env.ef_circleci ] && source ~/project/.env.ef_circleci
                  [ -n "<< pipeline.parameters.BUILD_DIR >>" ] && cd "<< pipeline.parameters.BUILD_DIR >>"
                  [ -n "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>" ] && eval "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
                  eval "<< pipeline.parameters.BUILD_COMMAND >>"

      - when:
          condition:
            equal: ["nextjs", "<< pipeline.parameters.FRAMEWORK >>"]
          steps:
            - run:
                name: Build Next.js Project
                working_directory: ~/project/repository
                command: |
                  set -e

                  # Load prerequisites and set nextjs standalone mode
                  export NEXT_PRIVATE_STANDALONE=true
                  export NODE_OPTIONS=--max_old_space_size=7168

                  # Function to log messages
                  log() {
                    echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
                  }

                  # Load environment variables
                  log "Loading environment variables..."
                  [ -f ~/project/.env ] && source ~/project/.env
                  [ -f ~/project/.env.ef_circleci ] && source ~/project/.env.ef_circleci

                  # Copy .env.ef_circleci to .env in the output directory
                  log "Copying environment variables to output directory..."
                  if [ -f ~/project/.env.ef_circleci ]; then
                    cp ~/project/.env.ef_circleci ~/project/repository/.env
                  fi

                  # Change to the specified build directory if provided
                  if [ -n "<< pipeline.parameters.BUILD_DIR >>" ]; then
                    log "Changing to build directory: << pipeline.parameters.BUILD_DIR >>"
                    cd "<< pipeline.parameters.BUILD_DIR >>"
                  fi

                  # Install dependencies
                  if [ -n "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>" ]; then
                    log "Installing dependencies..."
                    eval "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
                  else
                    log "Error: PACKAGE_INSTALL_COMMAND is not set. Exiting."
                    exit 1
                  fi

                  # Build the project
                  if [ -n "<< pipeline.parameters.BUILD_COMMAND >>" ]; then
                    log "Building the project..."
                    eval "<< pipeline.parameters.BUILD_COMMAND >>"
                  else
                    log "Error: BUILD_COMMAND is not set. Exiting."
                    exit 1
                  fi

                  # Create output directory
                  log "Creating output directories..."
                  mkdir -p ~/project/repository/output
                  mkdir -p ~/project/repository/output/node_modules
                  mkdir -p ~/project/repository/output/public
                  mkdir -p ~/project/repository/output/.next

                  # Move necessary files from standalone to output
                  if [ ! -f .next/standalone/server.js ]; then
                    log "server.js not found in .next/standalone. Searching for its location..."
                    SERVER_JS_PATH=$(find .next/standalone -path '*/node_modules' -prune -o -name server.js -print)
                    if [ -n "$SERVER_JS_PATH" ]; then
                      log "Found server.js at $SERVER_JS_PATH"
                      SERVER_JS_DIR=$(dirname "$SERVER_JS_PATH")
                      log "Copying files to ~/project/repository/output"
                      cp -r "$SERVER_JS_DIR"/* ~/project/repository/output/ || { log "Failed to copy files"; exit 1; }
                      cp -r "$SERVER_JS_DIR/.next" ~/project/repository/output/ || { log "Failed to copy .next"; exit 1; }
                    else
                      log "server.js not found in .next/standalone directory."
                      exit 1
                    fi
                  else
                    log "Copying files from .next/standalone"
                    cp -r .next/standalone/* ~/project/repository/output/ || { log "Failed to copy files"; exit 1; }
                    cp -r .next/standalone/.next ~/project/repository/output/ || { log "Failed to copy .next"; exit 1; }
                  fi

                  # Copy static files, public directory, node_modules and .env
                  cp -r .next/static/ ~/project/repository/output/.next/ || { log "Failed to copy static files"; exit 1; }
                  cp -r public/* ~/project/repository/output/public/ || { log "Failed to copy public files"; exit 1; }
                  cp -r .next/standalone/node_modules ~/project/repository/output/ || { log "Failed to copy node_modules"; exit 1; }
                  cp ~/project/repository/.env ~/project/repository/output/ || { log "Failed to copy .env"; exit 1; }

                  log "Listing contents of output directory:"
                  ls -la ~/project/repository/output/

                  # Set OUTPUT_DIR to output
                  echo "export OUTPUT_DIR=output" >> $BASH_ENV

      - when:
          condition:
            equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Download and Extract from S3
                command: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_REGION

                  if [ "<< pipeline.parameters.ENVIRONMENT >>" == "development" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_DEV
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "testnet-sepolia" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "testnet-sepolia-staging" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA_STAGING
                  else
                    echo "Invalid / default environment specified."
                    exit 1
                  fi

                  S3_PATH="s3://$S3_BUCKET_NAME/$(basename "<< pipeline.parameters.S3_URL >>")"
                  aws s3 cp $S3_PATH ~/project/repository --recursive

                  if [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type d | wc -l) -eq 1 ] && [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type f | wc -l) -eq 0 ]; then
                    extracted_folder=$(find ~/project/repository -mindepth 1 -maxdepth 1 -type d)
                    mv "$extracted_folder"/* ~/project/repository/
                    rmdir "$extracted_folder"
                  fi

      - when:
          condition:
            equal: ["static", "<< pipeline.parameters.FRAMEWORK >>"]
          steps:
            - run:
                name: Check for index.html
                working_directory: ~/project/repository
                command: |
                  OUTPUT_DIR=.
                  if [ -n "<< pipeline.parameters.OUTPUT_DIR >>" ]; then
                    OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
                  fi
                  if [ -f "$OUTPUT_DIR/index.html" ]; then
                    echo "index.html found in $OUTPUT_DIR"
                  else
                    echo "Error: index.html not found in $OUTPUT_DIR"
                    exit 1
                  fi

      - run:
          name: Create Earthfast Bundle
          working_directory: ~/project
          command: |
            # Debug information
            echo "Current directory: $(pwd)"
            echo "Checking for output directory..."
            ls -la repository/

            # Check if FRAMEWORK is 'nextjs' and set OUTPUT_DIR accordingly
            if [ "<< pipeline.parameters.FRAMEWORK >>" = "nextjs" ]; then
              OUTPUT_DIR="output"
            else
              OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
            fi

            echo "OUTPUT_DIR is set to: $OUTPUT_DIR"
            echo "Checking if directory exists: repository/$OUTPUT_DIR"

            # Ensure the OUTPUT_DIR is correctly set
            if [ ! -d "repository/$OUTPUT_DIR" ]; then
              echo "Error: Directory repository/$OUTPUT_DIR does not exist."
              echo "Contents of repository directory:"
              ls -la repository/
              exit 1
            fi

            BUNDLE_PATH="repository/$OUTPUT_DIR"
            echo "Bundle path is set to: $BUNDLE_PATH"

            bundle_filename="$(npx --package=earthfast-cli@0.10.2 --yes earthfast bundle create earthfast-bundle "$BUNDLE_PATH")"
            checksum="$(npx --package=earthfast-cli@0.10.2 --yes earthfast bundle checksum $bundle_filename)"

            echo $checksum > ~/project/repository/checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"

      - when:
          condition:
            equal: ["nextjs", "<< pipeline.parameters.FRAMEWORK >>"]
          steps:
            - run:
                name: Validate Next.js Bundle Structure
                working_directory: ~/project/repository/output
                command: |
                  echo "Checking Next.js bundle structure..."

                  # Verify essential Next.js files and directories
                  if [ ! -f "server.js" ]; then
                    echo "Error: server.js is missing"
                    exit 1
                  fi

                  if [ ! -d ".next" ]; then
                    echo "Error: .next directory is missing"
                    exit 1
                  fi

                  if [ ! -d ".next/static" ]; then
                    echo "Error: .next/static directory is missing"
                    exit 1
                  fi

                  if [ ! -d "public" ]; then
                    echo "Warning: public directory is missing, this might be okay if no static assets are used"
                  else
                    echo "Public directory is present"
                  fi

                  echo "Next.js bundle structure is valid"

            - run:
                name: Validate Next.js Bundle Dependencies
                working_directory: ~/project/repository/output
                command: |
                  echo "Checking for missing dependencies in the Next.js bundle..."

                  # Check if package.json exists and node_modules is populated
                  if [ ! -d "node_modules" ] || [ $(find node_modules -mindepth 1 -maxdepth 1 | wc -l) -eq 0 ]; then
                    echo "Error: node_modules directory is missing or empty"
                    exit 1
                  fi

                  # Check for common Next.js required modules
                  required_modules=("next" "react" "react-dom")
                  for module in "${required_modules[@]}"; do
                    if [ ! -d "node_modules/$module" ]; then
                      echo "Error: Required dependency '$module' is missing"
                      exit 1
                    fi
                  done

                  echo "All required dependencies are present"

            - run:
                name: Test Next.js Bundle
                working_directory: ~/project/repository/output
                command: |
                  echo "Testing Next.js bundle to verify it can start properly..."

                  # Install curl for HTTP testing
                  sudo apt-get update
                  sudo apt-get install -y curl

                  # Start the server with specific host binding
                  PORT=3000
                  NODE_OPTIONS="--max-old-space-size=4096" HOST="0.0.0.0" node server.js &
                  server_pid=$!

                  # Wait for server to start
                  echo "Waiting for server to start (polling)..."
                  MAX_RETRIES=15
                  RETRY_COUNT=0
                  SERVER_READY=false

                  # Get the container IP
                  CONTAINER_IP=$(hostname -I | awk '{print $1}')
                  echo "Container IP: $CONTAINER_IP"

                  # Poll until server is ready or max retries reached
                  while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SERVER_READY" = false ]; do
                    RETRY_COUNT=$((RETRY_COUNT+1))
                    echo "Attempt $RETRY_COUNT of $MAX_RETRIES..."

                    # Use consistently the container IP for reliability and debugging
                    if curl -s --head --fail http://$CONTAINER_IP:$PORT; then
                      SERVER_READY=true
                      echo "Server is ready after $RETRY_COUNT attempts! Successfully connected to http://$CONTAINER_IP:$PORT"
                    else
                      echo "Server not ready yet at http://$CONTAINER_IP:$PORT, waiting 1 second..."
                      sleep 1
                    fi
                  done

                  # Continue with the rest of the script
                  if [ "$SERVER_READY" = false ]; then
                    echo "Error: Server failed to start after $MAX_RETRIES attempts"
                    if kill -0 $server_pid 2>/dev/null; then
                      kill $server_pid
                    fi
                    echo "Completely stopping CircleCI workflow due to server startup failure"
                    circleci-agent step halt
                  fi

                  # Check if server is still running
                  if kill -0 $server_pid 2>/dev/null; then
                    echo "Server is running correctly"
                    kill $server_pid
                  else
                    echo "Error: Server crashed during testing"
                    # Completely halt the CircleCI workflow
                    echo "Completely stopping CircleCI workflow due to server crash"
                    circleci-agent step halt --exit-code=1
                  fi

      - store_artifacts:
          path: earthfast-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum

      - run:
          name: Notify One Click Server
          when: always
          command: |
            ONE_CLICK_SERVER_URL="<< pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            PIPELINE_ID="<< pipeline.id >>"
            CHECKSUM_PATH="$HOME/project/repository/checksum"

            if [ -f "$CHECKSUM_PATH" ]; then
              CHECKSUM=$(cat "$CHECKSUM_PATH")
              STATUS="success"
              BUNDLE_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/earthfast-bundle.tgz"
            else
              STATUS="failure"
            fi

            DATA='{"checksum":"'"$CHECKSUM"'","bundleUrl":"'"$BUNDLE_URL"'","pipelineId":"'"$PIPELINE_ID"'","status":"'"$STATUS"'"}'

            SIGNATURE=$(echo -n "$DATA" | openssl dgst -sha256 -hmac "$CIRCLECI_WEBHOOK_SECRET" | sed 's/^.* //')
            FULL_URL="${ONE_CLICK_SERVER_URL}/circleci/notify"

            curl -X POST \
              -H "Content-Type: application/json" \
              -H "x-circleci-signature: $SIGNATURE" \
              -d "$DATA" \
              "$FULL_URL"

workflows:
  version: 2
  build-and-publish:
    jobs:
      - publish
