version: 2.1

parameters:
  SOURCE_TYPE:
    type: string
    default: "github"
  S3_URL:
    type: string
    default: ""
  REPOSITORY:
    type: string
    default: "https://github.com/thales-markets/thales-sport-markets"
  REF:
    type: string
    default: ""
  BUILD_DIR:
    type: string
    default: ""
  PACKAGE_INSTALL_COMMAND:
    type: string
    default: "export NODE_OPTIONS=--openssl-legacy-provider && npm install"
  BUILD_COMMAND:
    type: string
    default: "npm run build"
  OUTPUT_DIR:
    type: string
    default: ""
  ONE_CLICK_SERVER_URL:
    type: string
    default: ""
  ENVIRONMENT_VARIABLES:
    type: string
    default: ""  # Base64 encoded
  ENVIRONMENT:
    type: string
    default: "default"
    enum: ["default", "development", "staging", "sepolia-staging"]

jobs:
  publish:
    docker:
      - image: cimg/node:22.4.1
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y awscli
            npm install node-forge
      - run:
          name: Decode environment variables
          command: |
            # echo "Decoding environment variables..."
            # echo "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" > ~/project/encrypted_data.txt

            # # Create a JavaScript script to decrypt the environment variables
            # echo "const forge = require('node-forge');" > decrypt.js
            # echo "const fs = require('fs');" >> decrypt.js
            # echo "const path = require('path');" >> decrypt.js
            # echo "const privateKeyPem = Buffer.from(process.env.BASE64_ENCODED_PRIVATE_KEY, 'base64').toString('utf8');" >> decrypt.js
            # echo "const privateKey = forge.pki.privateKeyFromPem(privateKeyPem);" >> decrypt.js
            # echo "const encryptedData = fs.readFileSync(path.join('/home/circleci/project/encrypted_data.txt'), 'utf8');" >> decrypt.js
            # echo "const decodedData = forge.util.decode64(encryptedData);" >> decrypt.js
            # echo "const decryptedData = privateKey.decrypt(decodedData, 'RSA-OAEP', { md: forge.md.sha256.create(), mgf1: { md: forge.md.sha1.create() } });" >> decrypt.js
            # echo "fs.writeFileSync(path.join('/home/circleci/project/decrypted_env.txt'), decryptedData);" >> decrypt.js

            # # Run the JavaScript script
            # node decrypt.js

            echo "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" > /home/circleci/project/decrypted_env.txt
            sed -i 's/^/export /' /home/circleci/project/decrypted_env.txt

            echo "Environment variables after sourcing:"
            source /home/circleci/project/decrypted_env.txt
            env

            # Log parameter values
            echo "Source type: << pipeline.parameters.SOURCE_TYPE >>"
            echo "S3 URL: << pipeline.parameters.S3_URL >>"
            echo "Repository: << pipeline.parameters.REPOSITORY >>"
            echo "Reference: << pipeline.parameters.REF >>"
            echo "Build directory: << pipeline.parameters.BUILD_DIR >>"
            echo "Package install command: << pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
            echo "Build command: << pipeline.parameters.BUILD_COMMAND >>"
            echo "Output directory: << pipeline.parameters.OUTPUT_DIR >>"
            echo "One click server URL: << pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            echo "Environment: << pipeline.parameters.ENVIRONMENT >>"

      - when:
          condition:
            or:
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "url"]
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "github"]
          steps:
            - run:
                name: Clone repository from URL
                command: |
                  git clone "<< pipeline.parameters.REPOSITORY >>.git" ~/project/repository
                  cd ~/project/repository
                  if [ -n "<< pipeline.parameters.REF >>" ]; then
                    git checkout "<< pipeline.parameters.REF >>"
                  else
                    echo "No branch specified, staying on default branch."
                  fi
            - run:
                name: Run build command
                working_directory: ~/project/repository
                command: |
                  set -e  # Ensure that the script fails if any command fails
                  if [ -f ~/project/.env ]; then
                    source ~/project/.env
                  fi

                  # Navigate to the build directory if specified
                  if [ -n "<< pipeline.parameters.BUILD_DIR >>" ]; then
                    echo "Changing to build directory: << pipeline.parameters.BUILD_DIR >>"
                    cd "<< pipeline.parameters.BUILD_DIR >>"
                  else
                    echo "No build directory specified, staying in repository root."
                  fi

                  # Run package install command if specified
                  if [ -n "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>" ]; then
                    echo "Running package install command..."
                    eval "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
                  else
                    echo "No package install command specified."
                  fi

                  # Run build command
                  echo "Running build command..."
                  eval "<< pipeline.parameters.BUILD_COMMAND >>"

      - when:
          condition:
            equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Download and Extract from S3
                command: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_REGION

                  if [ "<< pipeline.parameters.ENVIRONMENT >>" == "development" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_DEV
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "staging" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "staging-sepolia" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA_STAGING
                  else
                    echo "Invalid / default environment specified."
                    exit 1
                  fi

                  S3_PATH="s3://$S3_BUCKET_NAME/$(basename "<< pipeline.parameters.S3_URL >>")"
                  aws s3 cp $S3_PATH ~/project/repository --recursive

                  if [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type d | wc -l) -eq 1 ] && [ $(find ~/project/repository -mindepth 1 -maxdepth 1 -type f | wc -l) -eq 0 ]; then
                    extracted_folder=$(find ~/project/repository -mindepth 1 -maxdepth 1 -type d)
                    mv "$extracted_folder"/* ~/project/repository/
                    rmdir "$extracted_folder"
                  fi

      - run:
          name: Check for index.html
          working_directory: ~/project/repository
          command: |
            OUTPUT_DIR=.
            if [ -n "<< pipeline.parameters.OUTPUT_DIR >>" ]; then
              OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
            fi

            if [ -f "$OUTPUT_DIR/index.html" ]; then
              echo "index.html found in $OUTPUT_DIR"
            else
              echo "Error: index.html not found in $OUTPUT_DIR"
              exit 1
            fi

      - run:
          name: Create earthfast release
          working_directory: ~/project/repository
          command: |
            OUTPUT_DIR="<< pipeline.parameters.OUTPUT_DIR >>"
            if [ -z "$OUTPUT_DIR" ] || [ "$OUTPUT_DIR" = "." ]; then
              echo "No specific output directory specified or '.' provided. Using current directory."
              bundle_filename="$(npx --package=earthfast-cli@0.7.0 --yes earthfast bundle create earthfast-bundle)"
            else
              echo "Changing to output directory: $OUTPUT_DIR"
              bundle_filename="$(npx --package=earthfast-cli@0.7.0 --yes earthfast bundle create earthfast-bundle "$OUTPUT_DIR")"
            fi

            checksum="$(npx --package=earthfast-cli@0.7.0 --yes earthfast bundle checksum $bundle_filename)"
            echo $checksum > ~/project/repository/checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"
            mv earthfast-bundle.tgz ~/project/earthfast-bundle.tgz

      # store artifacts in circleci for download
      - store_artifacts:
          path: earthfast-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum
      - run:
          name: Notify one click server of the outcome
          when: always
          command: |
            ONE_CLICK_SERVER_URL="<< pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            PIPELINE_ID="<< pipeline.id >>"

            BUNDLE_URL=""
            CHECKSUM=""
            STATUS="failure"

            CHECKSUM_PATH="$HOME/project/repository/checksum"
            if [ -f "$CHECKSUM_PATH" ]; then
              CHECKSUM=$(cat "$CHECKSUM_PATH")
              STATUS="success"
              BUNDLE_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/earthfast-bundle.tgz"
            else
              echo "Checksum file not found at $CHECKSUM_PATH"
            fi

            echo "Bundle URL: $BUNDLE_URL"
            echo "Pipeline ID: $PIPELINE_ID"
            echo "Checksum: $CHECKSUM"
            echo "Status: $STATUS"
            echo "One Click Server URL: $ONE_CLICK_SERVER_URL"

            DATA='{"checksum":"'"$CHECKSUM"'","bundleUrl":"'"$BUNDLE_URL"'","pipelineId":"'"$PIPELINE_ID"'","status":"'"$STATUS"'"}'
            echo "Data Payload: $DATA"

            SIGNATURE=$(echo -n "$DATA" | openssl dgst -sha256 -hmac "$CIRCLECI_WEBHOOK_SECRET" | sed 's/^.* //')
            FULL_URL="${ONE_CLICK_SERVER_URL}/circleci/notify"
            echo "Full URL: $FULL_URL"

            curl -X POST -H "Content-Type: application/json" -H "x-circleci-signature: $SIGNATURE" -d "$DATA" "$FULL_URL"

workflows:
  version: 2
  build-and-publish:
    jobs:
      - publish
